---
title: Rendering HTML Pages
order: 5
intro: >
  Lucky handles rendering of HTML with Crystal code. This allows a huge amount of
  flexibility when sharing common HTML, and makes it easy to do without having to
  learn any framework-specific code. You can use regular Crystal classes and
  modules.
---

## Rendering a page from an action

Let's say we have an action and we want to render all of our user's names:

```crystal
# in src/actions/users/index.cr
class Users::Index < BrowserAction
  action do
    # Renders the Users::IndexPage by default
    render user_names: ["Paul", "Sally", "Jane"]
  end
end
```

By default `render` will render a page with the name of the class and `Page`
appended. So if you used `render` in `MyCoolAction`, Lucky would try to render
`MyCoolActionPage`.

You could also tell render exactly which page to render like this:

```
render Users::IndexPage, user_names: ["Paul", "Sally", "Jane"]
```

This is helpful when you want to render a page used by multiple actions. For
example, you might have an action for handling user searches that uses the
`Users::IndexPage`:

```crystal
class UserSearches::Show < BrowserAction
  get "/user_searches" do
    render Users::IndexPage, user_names: ["Jane"]
  end
end
```

## Adding a page

Let's create the page for our `Users::Index` action.

```crystal
# in src/pages/users/index_page.cr
class Users::IndexPage < MainLayout
  needs user_names : Array(String)

  def render
    ul class: "my-user-list" do
      @user_names.each do |name|
        li name, class: "user-name"
      end
    end
  end
end
```

Woo hoo! We created our first page. Let's walk through what's going on.

## Declaring what a page needs

You’ll notice we used `needs` near the top of the class. This declares that for
this page to render we need an Array of Strings and that they will be assigned
to the `@user_names` variable. We set the user names by passing it in the
`render` macro in our action: `render user_names: ["Paul", "Sally", "Jane"]`

> This is nice because you won’t accidentally forget to pass something to a page
ever again. If you forget, the compiler will tell you that you’re missing
something.

## Rendering HTML in our page

We then created a `render` macro in our class to render our actual HTML. Tags
are generated with regular Crystal methods. Most all HTML5 tags are available by
default.

> Note that paragraph tags are `para` instead of `p` since `p` is already used
by Crystal. You can use `pp` to debug output.

### Examples of using HTML tags

```crystal
# Generate a ul tag with no other options (class, data attributes, etc), and render tags within it
ul do
  li "Hey!"
end

# Generate a ul tag with options and more tags within it
ul class: "my-list", data_foo: "bar" do
  li "Excellent list item"
end

# Generate a tag with the text as it's content
h1 "My cool test"

# Generate a tag with the text as content and with options
h1 "My cool test", class: "app-header"
```

Order and nesting works about the same as how you would write normal HTML

```crystal
def render
  # You can have a list
  ul do
    li "List item"
  end

  # And underneath it render something else
  footer "Copyright Notice"
end
```


## Special tags (link, form helpers, etc.)

There are a few specials helpers that make it easier. For creating links with an
anchor tag, we have the `link` helper.

```
link "Link Text", to: "/somewhere", class: "some-html-class"

# The real power comes when used with route helers from actions
link "Show user", to: Users::Show.with("user_id"), class: "some-html-class"

# Leave off `with` if an action doesn't need params
link "List of users", to: Users::Index
```

When you pass a route helper as we did with `Users::Show.with("user_id")`, the
link helper automatically sets the path *and* the correct HTTP verb.

Since the HTTP verb (`GET`, `POST`, `PUT`, etc.) is automatically used by `link`
we can do delete links like this:

```
# data-method="delete" will automatically be set.
# This means the link submits with the right HTTP verb automatically.
link "Delete", to: Users::Delete.with("user_id")

# You can use the same nesting as with most other tags
link to: Users::Delete.with("user_id"), class: "delete-link" do
  img src: asset("images/delete-icon.svg")
end
```

> Since the link automatically includes the HTTP verb, you are guaranteed at
compile time that the link will go to the right place.

### Rendering HTML forms

There are some helpers for rendering HTML forms. For more info see the [saving
data with forms](/guides/saving-with-forms/#using-with-html-forms) guide.

## Rendering text

Sometimes you want to render plain text. To do that use the `text` method.

> Strings rendered with `text` are automatically HTML escaped for security. Text
passed to tags are also escaped.

```
div "email" do
  text "This is the email text"
  br
  span "inbox", class: "email-tag"
end
```

### Render unescaped text

```
div "email" do
  # Use the `raw` method to render unescaped text
  raw "&middot;" # Render a middot HTML entity
end
```

## Extract partials and shared code

Extracting code for reuse or clarity is easy since pages are made of classes and
methods.

```crystal
class Users::ShowPage < MainLayout
  def render
    render_user_header
  end

  # We can extract a private method to make our code easier to understand
  private def render_user_header
    div class: "user-header" do
      h1 "Users"
      a "Back to users index", href: Users::Index.path
    end
  end
end
```

### Share between pages with a module

```crystal
# in src/components/users/components.cr
module Users::Components
  private def render_user_header
    div class: "user-header" do
      h1 "Users"
      link "Back to users index", to: Users::Index
    end
  end
end

# and use it in the view
class Users::ShowPage < MainLayout
  include Users::Components

  def render
    render_user_header
  end
end
```

## Layouts

There is an automatically generated layout called `MainLayout`. Pages are
rendered within this layout if you use `MainLayout`. Pages can also define methods
that the layout can call so that pages can render things in the layout.

### Rendering page specific content in the layout

You can define methods on the page so the layout can render them. An example of
this is found in `MainLayout`:

```
# src/pages/main_layout.cr
def page_title
  # content of the method
end
```

This makes it so that every page that inherits from `MainLayout` has a `page_title`
method.

The layout calls this method to get the page's title

```
# in src/pages/main_layout.cr
title @page.page_title
```

So to set a page specific title, do this:

```
# src/pages/users/index_page.cr
class Users::IndexPage < MainLayout
  def page_title
    "List of users"
  end
end
```

This technique can be used to render other types of content, like a sidebar
(similar to `content_for` in Rails):

```
# src/pages/main_layout.cr in the `render` method
div class: "sidebar" do
  @page.sidebar
end

# src/pages/main_layout.cr
# This makes it so that every page needs to implement the sidebar method
abstract def sidebar
```

## Extracting different base pages and layouts

Pages look different, they have different layouts. In the following example,
let's assume some pages have a sidebar while other pages do not. There are a
couple ways to extract a base layout for pages that include a sidebar.

### Set up separate pages and layouts

Instead of adding a `sidebar` method to your `MainLayout` and `MainLayout` you
might extract a `PageWithSidebar` and `SidebarLayout`.

```
# src/pages/sidebar_layout.cr
class SidebarLayout
  include LuckyWeb::Page
  include LuckyWeb::Layout

  # Tells Lucky that pages using this layout must inherit from PageWithSidebar
  @page : PageWithSidebar

  def render
    # `html`, `head` and `body` tags were removed for brevity

    body do
      # Render the main page contents
      @page.render_inner

      div class: "sidebar" do
        # Render the sidebar
        @page.sidebar
      end
    end
  end
end

# src/pages/page_with_sidebar.cr
abstract class PageWithSidebar < BasePage
  # The `inherited` hook is built into Crystal
  # https://crystal-lang.org/docs/syntax_and_semantics/macros/hooks.html
  macro inherited
    # Tells Lucky to use the SidebarLayout when rendering
    layout SidebarLayout
  end

  # Force pages to implement a sidebar method
  abstract def sidebar
end

# Use the new PageWithSidebar
# src/pages/dashboard/show_page.cr
class Dashboard::ShowPage < PageWithSidebar
  def render
    h1 "My Dashboard"
  end

  def sidebar
    ul do
      li "This is an item in the sidebar"
    end
  end
end
```

> Common layout components could be extracted to
src/components/layouts/components.cr. See ["Extract partials and shared code"](#extract-partials-and-shared-code)

### Using `responds_to` in the layout

> This should be used sparingly because it makes it less clear what all pages
can do. This is shown as an example because it might be helpful if a layout
only has one or two instances where it needs to conditionally render something
from a page.

```
# Makes it so that some pages can have sidebar and others can leave it out.
# In a layouts `render` method
if @page.responds_to?(:sidebar)
  @page.sidebar
end
```

## Sharing data used by all pages

Let's say you want to show the currently signed user on every page. It
would be a pain to have to type `needs current_user : User` in every page object and
`expose current_user: find_the_user` in every action. Lucky's got you covered.

### Example using `needs` and `expose`

You can add `needs` to the `MainLayout` if every page needs something.

For actions, we have an `expose` macro that makes it easy to automatically pass
data to rendered pages.

The `expose` macro sends the results of a method to the page, as if you had passed
it manually:

```
# Without `expose`
class Users::Index < BrowserAction
  action do
    render current_user_name: current_user_name
  end

  private def current_user_name
    "Bobby"
  end
end

# The equivalent version using `expose`
class Users::Index < BrowserAction
  expose current_user_name

  action do
    render
  end
end
```

### Full example

```
# in src/actions/browser_action.cr
class BrowserAction
  # This will now pass the result of calling current_user_name to every page
  expose current_user_name

  private def current_user_name
    "The signed in user"
  end
end

# src/actions/users/index.cr
class Users::Index < BrowserAction
  action do
    # Lucky will pass the result of `current_user_name` to the rendered page
    # since we exposed the `current_user_name` in `BrowserAction`.
    # If we hadn't exposed it we'd do: `render current_user_name: current_user_name`
    render
  end
end

# in src/pages/main_layout.cr
class MainLayout < BasePage
  include LuckyWeb::Page

  # Now every page will require and have access to @current_user_name
  needs current_user_name : String
end

# src/pages/users/index_page.cr
class Users::IndexPage < MainLayout
  # Don't need to type `needs current_user_name : String`
  # since it was done in `MainLayout`

  def render
    h1 @current_user_name
  end
end
```
