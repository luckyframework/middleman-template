---
title: Actions and Routing
order: 4
intro: >
  Actions are classes that handle routing and handling an HTTP request. Actions
  are typically used to save and read data from the database, and return
  HTML/JSON, or handle redirects. Actions can also have pipes that help with
  authentication, authorization, and more.
---

## Routing

Unlike many frameworks, there is no separate routes file. An action declares
which route it handles in the class itself.

You can route to an action by using `get`, `put`, `post` and `delete` macros, or
[Lucky can figure it out for you](#automatically-generate-restful-routes).

```crystal
# src/actions/users/index.cr
class Users::Index < BrowserAction
  # GET requests to the /users path are handled by this action
  get "/users" do
    render_text "List of users goes here"
  end
end
```

## Path Parameters

Sometimes you want to name certain parts of the path and access them as parameters.

```crystal
# src/actions/users/show.cr
class Users::Show < BrowserAction
  get "/users/:my_user_id" do
    render_text "User with an id of #{my_user_id}"
  end
end
```

When you use you start a section of the path with `:` it will generate a param method for your.

In this case anything you pass in the part of the URL for `:my_user_id` will be
available in the `my_user_id` method. So in this example if you visited
`/users/123` then it would return a text response of `User with an id of 123`.

### You can use as many parameters as you want

Every named parameter will have a method generated for it that so that you can
access the value. You can have as many as you want

For example, `delete "/projects/:project_id/tasks/:id"` would have a
`project_id` and `id` method generated on the class for accessing the named
parameters.

## Where to Put Actions

Actions go in `src/actions` and follow the structure of the class.

For example `Users::Show` would go in `src/actions/users/show.cr` and `Api::V1::Users::Delete` would go in `src/actions/api/v1/users/delete.cr`

## Automatically generate RESTful routes

REST is a way to make access to resources more uniform. It consists of the following actions:

* `Index` - show a list of resources
* `Show` - show one instance of a resource
* `New` - typically used to render a form to create a resource
* `Create` - create a resource. Usually means saving data to the database
* `Edit` - typically used to render a form to edit an existing resource
* `Update` - update an existing resource
* `Delete` - delete the resource

Use the `action` and `nested_action` macros to generate RESTful routes
automatically based on the class name.

### `action`

For `action`, it will use the first part of the class name as the resource name,
and the second part as one of the resourceful actions listed above.

```crystal
# Users is the resource
# Show is the RESTful action
class Users::Show < BrowserAction
  # Same as:
  #   get "/users/:id"
  action do
    render_text "The user with id of #{id}"
  end
end
```

### `nested_action`

For a nested resource it will use the third to last part as the
nested resource name, the second to last part of the class name as the resource
name,  and the last part as one of the resourceful actions listed above.

```crystal
# Projects is the parent resource
# Users is the nested resource
# Index is the RESTful action
class Projects::Users::Index < BrowserAction
  # Same as:
  #   get "/projects/:project_id/users"
  nested_action do
    render_text "Render list of users in project #{project_id}"
  end
end
```

### Namespaces are handled automatically

```crystal
# Anything before the resource (in this case, `Projects`) will be treated as a namespace
class Admin::Projects::Index < BrowserAction
  # Same as:
  #   get "/admin/projects"
  action do
    render_text "Render list of projects"
  end
end
```

### Examples of automatically generated routes

For the `action` macro:

*  `Users::Index`  -> `get "/users"`
*  `Users::Show`  -> `get "/users/:id"`
*  `Users::New`  -> `get "/users/new"`
*  `Users::Create`  -> `post "/users"`
*  `Users::Edit`  -> `get "/users/:id/edit"`
*  `Users::Update`  -> `put "/users/:id"`
*  `Users::Delete`  -> `delete "/users/:id"`
* Multiple namespaces: `Api::V1::Users::Show`  -> `get "/api/v1/users/:id"`
* Multi-word namespace: `MyAdminSection::Users::Show`  -> `get "/my_admin_section/users/:id"`

For the `nested_action` macro:

*  `Projects::Users::Index`  -> `get "/projects/:project_id/users"`
*  `Projects::Users::Show`  -> `get "/projects/:project_id/users/:id"`
*  `Projects::Users::New`  -> `get "/projects/:project_id/users/new"`
*  `Projects::Users::Create`  -> `post "/projects/:project_id/users"`
*  `Projects::Users::Edit`  -> `get "/projects/:project_id/users/:id/edit"`
*  `Projects::Users::Update`  -> `put "/projects/:project_id/users/:id"`
*  `Projects::Users::Delete`  -> `delete "/projects/:project_id/users/:id"`
* Multiple namespaces: `Api::V1::Projects::Users::Show`  -> `get "/api/v1/projects/:project_id/users/:id"`
* Multi-word namespace: `MyAdminSection::Projects::Users::Show`  -> `get "/my_admin_section/projects/:project_id/users/:id"`

## Path and route helpers

Lucky automatically generates some helpers for generating links.

You can access them as class methods on the action itself. They are:

* `route` - will return a `LuckyWeb::RouteHelper` object that contains both the
  path, and the method HTTP method
* `with` - an alias for `route` that is used for passing paramaters
* `path` - will return a string

```crystal
class Projects::Users::Index < BrowserAction
  # Normally you would use `nested_action`
  # We'll use `get` here to make the example more clear
  get "projects/:project_id/users" do
    render_text "Users"
  end
end
```

You can then call these methods

* `Projects::Users::Index.path(project_id: "my_project_id")` and it will return ->
  `"/projects/my_project_id/users"`
* `Projects::Users::Index.with(project_id: "my_project_id")` and it will return a
  `LuckyWeb::Response` whose `#path` method returns
  `"/projects/my_project_id/users"` and `#method` method return `"GET"`

We'll talk about this more in the Pages guide. You can use the route helper with
links and form to automatically set the path *and* HTTP method at the same time.

## Redirecting

You can redirect using the `redirect` method:

> Note that for most methods you can pass the action directly if it does not
need any params. You can see this in the first `redirect` example below.

```crystal
class Users::Create < BrowserAction
  action do
    redirect to: Users::Index # Default status is 302
    redirect to: Users::Show.with(id: "user_id") # If the action needs params
    redirect to: "/somewhere_else" # Redirect using a string path
    redirect to: Users::Index, status: 301 # Override status
  end
end
```

## Using pipes

Sometimes you want to do things before or after running one or more actions. To
do this, you can use pipes. There is a `before` and `after` macro for running pipes.

```
# src/actions/admin/users/index.cr
class Admin::Users::Index < BrowserAction
  before require_admin

  get "/foo" do
    render_text "List of users"
  end

  private def require_admin
    if current_user.admin?
      continue
    else
      redirect to: SignIns::New
    end
  end

  private def current_user
    # Get the currently signed in user somehow
  end
end
```

Pipe methods *must* explicitly return `continue` or return a
`LuckyWeb::Response` by rendering, or redirecting. If a `LuckyWeb::Response` is
returned by rendering or redirecting, then no other pipe will run and the action
will not be called.

### Sharing common pipes

Sometimes you want to apply a pipe to many actions. To do that you can extract a
new type of action. Let's do that for our admin example above.

```crystal
# src/actions/admin_action.cr
abstract class AdminAction < BrowserAction
  before require_admin

  private def require_admin
    if current_user.admin?
      continue
    else
      redirect to: SignIns::New
    end
  end

  private def current_user
    # Get the currently signed in user somehow
  end
end
```

Now other actions can inherit from `AdminAction` and will automatically get
the `require_admin` pipe:

```crystal
# Note we're now inheriting from AdminAction
class Admin::Users::Index < AdminAction
  get "/foo" do
    render_text "List of users"
  end
end
```

### Sharing pipes with modules

Sometimes pipes need to be shared in a more flexible way. Let's say we want to
log certain actions. They may be admin action or guest actions so it doesn't make
sense to extract a base class like `LoggedAction` Instead we'll use a
`LogRequestPipe` module:

```crystal
# src/pipes/log_request_pipe.cr
module LogRequestPipe
  macro included
    after log_request_path
  end

  private def log_request_path
    MyCustomLogger.log(request.path)
  end
end
```

We can then include it in the actions that need it:

```crystal
# src/actions/dashboard/show.cr
class Dashboard::Show < BrowserAction
  include LogRequestPipe

  get "/dashboard" do
    render_text "The dashboard"
  end
end
```

## Cookies and sessions

You can set and access cookies in Lucky like this:

```
class FooAction < BrowserAction
  get "/foo" do
    cookies["name"] = "Sally"
    cookies["name"] # Will return "Sally"

    session["name"] = "Sally"
    session["name"] # Will return "Sally"
    render_text "Cookies!"
  end
end
```
