---
title: Saving Data with Forms
order: 7
intro: >
  Lucky saves records to the database using objects called forms. You can use
  forms to validate, format, and save data in a type safe and flexible way.
---

> Expect forms in Lucky to change often while in alpha. We will be experimenting
a lot with different APIs to try to keep the best balance between simplicity,
maintainability, and catching bugs at compile time.

# Setting up a form

When you set up a model, a `{ModelName}::BaseForm` will be created so that you can inherit
from it and customize validations, callbacks, and what fields are allowed to be
set. `{ModelName}::BaseForm` automatically defines a form field for each model field.

We’ll be using the migration and model from the [Querying
guide](/guides/querying-the-database/). Once you have that set up, let’s set
up a form:

```
# src/forms/user_form.cr
class UserForm < User::BaseForm
end
```

> You can have more than one form object to save a record in different ways. For
example, you might have a `RegistrationForm` that encrypts the user’s password
and sends them a welcome email.

## Allowing params to be saved

By default you won’t be able to set any data from params. This is a security
measure to make sure that parameters can only be set that you want to allow. For
example, you might not want your users to be able to set an admin status through
the `UserForm`.

To allow a field to be saved to the database, use the `allow` macro:

```
# src/forms/user_form.cr
class UserForm < User::BaseForm
  allow name
end
```

Now you will be able to save the user’s name with form params.

> Actions have a `params` method that returns a `LuckyWeb::Params` object. This is
used by the form to get form params that are set by [submitting an HTML form](#using-with-html-forms).

```
# inside of an action with some form params
UserForm.create(params) do |form, user|
  if user # the user was saved
    puts "Hello #{user.name}"
  else # the user was not saved
    pp form.errors
  end
end
```

You pass a block that is run whether the save is successful or not.

You will *always* receive the form object, but you will only get the saved user
if there are no errors while saving. If there are errors, the user will be `nil`.

### Updating records

```
# inside of an action with some form params
user = UserQuery.new.first
UserForm.update(user, params) do |form, updated_user|
  # do something with the form and user
end
```

In contrast to `create`, `update` will always pass the record to the block. To check
if any changes were persisted, you can call `form.save_succeeded?`, or `form.valid?`
to check if the submitted data was valid.

## Using with HTML forms

You can use forms in HTML like this:

> Remember: you *must* `allow` a field in order to use it in a form. If it isn’t
allowed the program will not compile.

```
# src/pages/users/new_page.cr
class Users::NewPage < MainLayout
  needs user_form : UserForm

  def content
    render_user_form(@user_form)
  end

  private def render_user_form(f)
    form_for Users::Create do
      label_for f.name
      text_input f.name
      errors_for f.name

      submit "Save User"
    end
  end
end
```

> A private method `render_user_form` is extracted because it makes it easier to
reference the form as `f`. It also makes it easier to see what a page looks like
with a quick glance at the `render` method.

```
class Users::Create < BrowserAction
  action do
    # params will have the form params sent from the HTML form
    UserForm.create(params) do |form, user|
      if user # if the user was saved
        redirect to: Home::Index
      else
        # re-render the NewPage so the user can correct their mistakes
        render NewPage, user_form: form
      end
    end
  end
end
```

### Select, email input, and other special inputs

The main inputs that you can use with Lucky:

* `text_input`
* `email_input`
* `color_input`
* `hidden_input`
* `number_input`
* `telephone_input`
* `url_input`
* `search_input`
* `password_input`
* `range_input`
* `textarea`

```
# Example using an email input
email_input f.email, optional_html_attributes: "anything"
```

### Submit

Call `submit` with the text to display

```
# In a page
submit "Text", optional_html_attributes: "anything you want"
```

### Checkboxes

```
# If checked, will set the `admin` column to true
checkbox f.admin, value: "true"
```

### Select with options

```
# Assuming you have a form with a category_id allowed
select_input form.category_id do
  options_for_select(form.category_id, categories_for_select)
end

private def categories_for_select
  CategoryQuery.new.map do |category|
    # The first element is the display name
    # The second element is the value sent to the form
    {category.title, category.id}
  end
end
```

### Labels

```
label_for f.title # Will display "Title"
label_for f.title, "Custom Title" # Will display "Custom Title"
label_for f.title do
  text "Custom Title"
  strong "(required)"
end
```

## Validating data

Lucky comes with a few built in validations:

* `validate_required` - ensures that a field is not `nil` or blank (e.g. `""`).
* `validate_confirmation_of` - ensures that fields have the same values.

> Note: non-nillable (required) fields automatically use
`validate_required`. They will run after the `prepare` callback. This way data
with missing fields will never be sent to the database.

### Using validations

You can use validations inside of the `prepare` callback:

```
class UserForm < User::BaseForm
  allow name

  def prepare
    validate_required name
  end
end
```

The `prepare` method is called when you call `valid?` on the form or when you
try to `save` or `update` it.

## What are fields?

First you’ll need to know that the fields defined in the form do not return the
value of the field. They return a `LuckyRecord::Field` that contains the value
of the field, the name of the field, the param value, and any errors the field
has.

This means that to access their value you must call `value` on the field.

```
class UserForm < User::BaseForm
  def prepare
    pp name.value
  end
end
```

## Custom validations

You can easily create your own validations. For example, let’s say we want to
make sure the user is old enough to use the site.

```
def prepare
  validate_is_old_enough
end

private def user_is_old_enough
  # The value might be `nil` so we need to use `try`.
  age.value.try do |value|
    if value < 13
      field.add_error "must be at least 13 to use this site"
    end
  end
end
```

## Callbacks

> Callbacks often get a bad rep because they can quickly lead to hard to
maintain code. One reason for this is situations arrive when you want callbacks
to run only in certain conditions. In Lucky this situation is quickly solved
by adding a new form. For example you might have a `SignUpForm` for a `User`
that encrypts the users password and sends a welcome email after saving. Or you
might have an `AdminUserForm` that saves a user and sends an admin specific
email.

You can use the following callbacks:

* `prepare`
* `before_save`
* `after_save(record : T)`

To use them, define a method in the form. Note that the `after_save`
callback needs to accept the newly created record. In this example, a `User`.

```
class UserForm < User::BaseForm
  def after_save(newly_saved_user : User)
    # do something with the user
  end
end
```

## Passing data without route params

Often times you want to add extra data to a form that the user does not fill out.

In this example, we'll associate a comment with a post:

```
class Posts::Comments::Create < BrowserAction
  action do
    post = PostQuery.find(id)
    # Params contain the title and body, but not the post_id
    # So we set it ourselves
    CommentForm.create(params, post_id: post.id) do |form, comment|
      # Do something with the form and comment
    end
  end
end
```

This sets the `post_id` when instantiating the form. You can pass anything
that is defined as a `column` on your model. Note that the fields are type
safe, so you don't need to worry about typos or passing the wrong types.
Lucky is set up to make sure it works automatically.

## Passing extra data to forms

Sometimes you need to pass extra data to forms that aren't in the form params.
For example you might want to pass the currently signed in user so that you know
who created a record. Here's how you do this:

```
# This is a great way to pass in an associated record
class UserForm < User::BaseForm
  needs current_user : User

  def prepare
    modified_by_id.value = current_user.id
  end
end

UserForm.create(params, current_user: a_user) do |form, user|
  # do something
end
```

This will make it so that you must pass in `current_user` when creating or updating
the `UserForm`. It will make a getter available for `current_user` so you can use
it in the form, like in the `prepare` method shown in the example.

### Declaring needs only for update, create, or save

Sometimes you only want to pass extra data when creating or updating a record.
You can use the `on` option to do that:

* `:update` if only required for update
* `:create` if only required for create
* `:save` if required for update and create, but now when calling `new`

```
class CommentForm < Comment::BaseForm
  needs author : User, on: :create # can also be `:update`, `:save`

  def prepare
    author.try do |user|
      authored_by_id.value = user.id
    end
  end
end

> Note that `author` is not required when calling `UserForm.new` when using
the `on` option. This means `author` can be `nil` in the form. That's why we
needed to use `try` in the `prepare` method.

# You must pass an author when creating
CommentForm.create(params, author: a_user) do |form, user|
  # do something
end

# But you can't when you are updating
CommentForm.update(comment, params) do |form, user|
  # do something
end

# You also can't pass it in when instantiating a new CommentForm
CommentForm.new
```

> **When should I use `on`?** If you are building an server rendered HTML app
then you will almost always wants to use `on :save|:update|:create` because
you will call `MyForm.new` without the needs. If you are building a JSON API
you may want to omit the `on` option since you rarely use `.new`. If you omit
`on` then you don't need to worry about the value ever being `nil`, which can
make your program more reliable and easier to understand.

## Virtual fields

Sometimes you want users to submit data that isn't saved to the database. For that
we use `allow_virtual`.

Here's an example of using `allow_virtual` to create a sign up form:

```
# First we create a model
# src/models/user.cr
class User < BaseModel
  table :users do
    field name : String
    field email : String
    field encrypted_password : String
  end
end
```

```
# src/forms/sign_up_form.cr
require "crypto/bcrypt/password"

class SignUpForm < User::BaseForm
  # These are fields that will be saved to the database
  allow name, email
  # Fields that users can fill out, but aren't saved to the database
  allow_virtual password : String
  allow_virtual password_confirmation : String
  allow_virtual terms_of_service : Bool

  def prepare
    # Make sure the user has checked the terms of service box
    validate_acceptance_of terms_of_service
    # Make sure the passwords match
    validate_confirmation_of password, with: password_confirmation
    encrypt_password(password.value)
  end

  private def encrypt_password(password_value : String?)
    if password_value
      encrypted_password.value = Crypto::Bcrypt::Password.create(password_value, cost: 10).to_s
    end
  end
end
```

### Using virtual fields in an HTML form

Using virtual fields in HTMLworks exactly the same as with database fields:

```
# src/pages/sign_ups/new_page.cr
class SignUps::NewPage < MainLayout
  needs sign_up_form : SignUpForm

  def content
    render_sign_up_form(@sign_up_form)
  end

  private def render_sign_up_form(f)
    form_for SignUps::Create do
      # labels and errors_for ommitted for brevity
      f.text_input f.name
      f.text_input f.email
      f.password_input f.password
      f.password_input f.password_confirmation
      f.checkbox f.terms_of_service

      submit "Sign up"
    end
  end
end
```

## Saving forms without a params object

> This will be improved soon. Right now there is very little type safety when
creating forms this way.

This can be helpful if you’re saving something that doesn’t need an HTML form,
like if you only need the params passed in the path.

```
UserForm.new(name: "Paul").create

# for updates
UserForm.new(existing_user, name: "David").update
```

## Sharing common validations, callbacks, etc.

When using multiple forms for one model you often want to share a common set of
validations, allowances, etc.

You can do this with a module:

```
# src/forms/mixins/user_form_defaults
module UserFormDefaults
  macro included
    allow name, age, email
  end

  def prepare
    validate_old_enough_to_use_website
  end
end
```

Then in your form:

```
# src/forms/admin_user_form.cr
class AdminUserForm < User::BaseForm
  include UserFormDefaults
  allow work_email

  def prepare
    super
    admin.value = true
  end
end
```

## Ideas for naming

In Lucky it is common to have multiple forms per model. This makes it easier to
understand what a form does and makes them easier to change later without
breaking other flows.

Here are some ideas for naming:

* `Csv{ModelName}Form` - great for forms that get data from a CSV. e.g. `CsvUserImportForm`
* `SignUpForm` - for signing up a new user. Encrypt passwords, send welcome emails, etc.
* `SignInForm` - check that passwords match
* `Admin{ModelName}Form` - sometimes admin can set more fields than a regular user. It’s
  often a good idea to extract a new form for those cases.
